{
  "name": "Xcss",
  "tagline": "CSS Framework executable simple powerfull templating",
  "body": "\"# xcss\"\r\n\r\nXCSS started as simple solution for inheriting css classes.\r\nIt solved the problem of not having CSS variables by extending classes.\r\n\r\nExperimenting with the content property however I discovered a powerfull\r\nrecursive templating solution that is very easy to use.\r\n\r\nWith this library the following css construct is possible and works  \r\n\r\ndiv {\r\n  content:\"`<div></div>`\";\r\n}\r\n\r\nor \r\n\r\ndiv {\r\n Â content:url(`mymage.html`);\r\n}\r\n\r\nIt results in nested divs a 100 levels deep. FUN! \r\n\r\n\r\nXCSS also adds a ONCLICK and WHEN constructions that enables routing.\r\nConditional css is applied when a certain hash state is reached. \r\n\r\nThe css in the rule is applied only WHEN the hash of the url\r\nequals the name used un the WHEN construction.\r\n\r\n\r\n!Extend algorithm:\r\n\r\nThis script iterates through all css rules and detects\r\nrules that have the extends keyword in their selector.\r\n\r\nA new rule is added for each rules having the extends keyword\r\nThis rule contains the style definitions of the rule itself and the inherited styles.\r\n\r\nBecause the script iterates recursively through the rules, transitive inheritance is also supported.\r\nIt is possible to build css class hierarchies very easy.\r\nThis saves a lot of less or sass work.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}